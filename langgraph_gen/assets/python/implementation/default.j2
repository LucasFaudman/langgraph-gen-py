"""This file was generated using `langgraph-gen` version {{ version }}.

This file provides a placeholder implementation for the corresponding graph.

Replace the placeholder implementation with your own logic.
"""

{% if config_module %}
from {{ config_module }} import {{ config_name }}
{% else %}
# Update the import path
# from [path to your config] import {{ config_name }}
{% endif %}
{% if state_module %}
from {{ state_module }} import {{ state_name }}
{% else %}
# Update the import path
# from [path to your state] import {{ state_name }}
{% endif %}
{% if input_module %}
from {{ input_module }} import {{ input_name }}
{% else %}
# Update the import path
# from [path to your input] import {{ input_name }}
{% endif %}
{% if output_module %}
from {{ output_module }} import {{ output_name }}
{% else %}
# Update the import path
# from [path to your output] import {{ output_name }}
{% endif %}

# Define stand-alone functions
{% for node in nodes %}
def {{ node.id }}(state: {{ state_name }}) -> {{ state_name }}:
    print("In node: {{ node.name }}")
    # Update the state here
    return state


{% endfor %}
{% for edge in edges if edge.condition is defined %}
def {{ edge.condition }}(state: {{ state_name }}) -> str:
    print("In condition: {{ edge.condition }}")
    raise NotImplementedError("Implement me.")


{% endfor %}


{{ implementation_name }} = {
    {% for node in nodes %}
    "{{ node.id }}": {{ node.id }},
    {% endfor %}
    {% for edge in edges if edge.condition is defined %}
    "{{ edge.condition }}": {{ edge.condition }},
    {% endfor %}
}

__all__ = [
    "{{ implementation_name }}",
    {% for node in nodes %}
    "{{ node.id }}",
    {% endfor %}
    {% for edge in edges if edge.condition is defined %}
    "{{ edge.condition }}",
    {% endfor %}
]


